{"version":3,"sources":["index.js"],"names":["Square","props","className","winningSquare","onClick","letter","Board","i","this","squares","winningArray","includes","start","numRows","row","j","push","createSquare","board","createRow","Number","parseInt","createBoard","React","Component","MoveList","ascending","arr","history","map","step","move","desc","lastLocation","jumpTo","selectedMove","reverse","ToggleButton","ascdesc","handleToggle","StatusBar","status","winner","fullBoard","xIsNext","Game","state","Array","fill","stepNumber","slice","length","setState","isBoardFull","concat","calculateWinningArray","calculateWinner","prevState","current","handleClick","winningCombos","k","combo","diagonal1","diagonal2","calculateWinningCombos","h","g","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f963fc1a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button\n      className={`square${props.winningSquare ? ' winning-square' : ''}`}\n      onClick={props.onClick}\n    >\n      {props.letter}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  createSquare(i) {\n    return (\n      <Square\n        letter={this.props.squares[i]}\n\tonClick={() => this.props.onClick(i)}\n\twinningSquare={(this.props.winningArray) ?\n          this.props.winningArray.includes(i) : null}\n      />\n    );\n  }\n\n  createRow(start, numRows) {\n    let row=[];\n    for (let j = start; j < (start+numRows); j++) {\n      row.push(this.createSquare(j));\n    }\n    return row;\n  }\n\n  createBoard(numRows) {\n    let board=[];\n    for (let j = 0; j < numRows; j++) {\n      board.push(\n        <div className=\"board-row\">\n          {this.createRow(j*numRows, numRows)}\n        </div>\n      );\n    }\n    return board;\n  }\n\n  render() {\n    const numRows = Number.parseInt(this.props.numRows, 10);\n    return (\n      <div>\n        {this.createBoard(numRows)}\n      </div>\n    );\n  }\n}\n\nfunction MoveList(props) {\n  const ascending = props.ascending;\n  const arr = props.history.map((step, move) => {\n    const desc = move ?\n    'Go to move #' + move + ' at (' + (props.history[move].lastLocation % props.numRows) + ', ' + parseInt(props.history[move].lastLocation / props.numRows) + ')':\n    'Go to game start';\n     return (\n       <li key={move}>\n         <button\n           onClick={() => props.jumpTo(move)}\n           className={`move-button${(move === props.selectedMove) ? ' selected-move' : ''}`}\n          >\n          {desc}\n          </button>\n       </li>\n     );\n   }\n  );\n  if (ascending) {\n    return arr;\n  } else {\n    return arr.reverse();\n  }\n}\n\nfunction ToggleButton(props) {\n  const ascending = props.ascending;\n  const ascdesc = ascending ? \"Sort descending\" : \"Sort ascending\";\n  return (\n    <button\n      onClick={props.handleToggle}\n    >\n      {ascdesc}\n    </button>\n  );\n}\n\nfunction StatusBar(props) {\n  let status;\n  if (props.winner) {\n    status = 'Winner: ' + props.winner;\n  } else if (props.fullBoard) {\n    status = 'Draw';\n  } else {\n    status = 'Next player: ' + (props.xIsNext ? 'X' : 'O');\n  }\n  return (<div>{status}</div>);\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(\n\t  (Number.parseInt(this.props.numRows, 10)) *\n\t  (Number.parseInt(this.props.numRows, 10))\n\t).fill(null),\n\tlastLocation: null,\n      }],\n      selectedMove: null,\n      stepNumber: 0,\n      xIsNext: true,\n      ascending: true,\n      winningArray: null,\n      winner: null,\n      fullBoard: false,\n    };\n  }\n\n  handleClick(i) {\n    if (this.state.winner) return;\n\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (squares[i]) return;\n\n    const numRows = Number.parseInt(this.props.numRows, 10);\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n\n    this.setState({ fullBoard: isBoardFull(squares) });\n\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        lastLocation: i,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n\n    let winningArray = calculateWinningArray(squares, numRows);\n    if (winningArray) {\n      this.setState({\n        winningArray: winningArray,\n        winner: calculateWinner(squares, winningArray),\n      });\n      return;\n    }\n  }\n\n  jumpTo(step) {\n    this.setState({\n      selectedMove: step,\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n    if (step < this.state.stepNumber) {\n      this.setState({\n        winningArray: null,\n        winner: null,\n        fullBoard: false,\n      });\n    }\n  }\n\n  handleToggle() {\n    this.setState(prevState => ({\n      ascending: !prevState.ascending\n    }));\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const numRows = Number.parseInt(this.props.numRows, 10);\n    const winner = calculateWinner(current.squares, calculateWinningArray(current.squares, numRows));\n\n    return (\n      <div className=\"game\">\n\n        <div className=\"status-bar\">\n          <StatusBar\n            winner={winner}\n            xIsNext={this.state.xIsNext}\n            fullBoard={this.state.fullBoard}\n          />\n        </div>\n\n        <div className=\"game-board\">\n          <Board\n\t    numRows={numRows}\n\t    squares={current.squares}\n\t    onClick={(i) => this.handleClick(i)}\n\t    winningArray={this.state.winningArray}\n          />\n        </div>\n\n        <div className=\"move-list-container\">\n\t  <div className=\"toggle-button\">\n\t    <ToggleButton\n\t      ascending = {this.state.ascending}\n\t      handleToggle = {() => this.handleToggle()}\n\t    />\n\t  </div>\n\t  <div className=\"move-list\">\n\t    <MoveList\n\t      history = {this.state.history}\n\t      jumpTo = {(move) => this.jumpTo(move)}\n\t      selectedMove = {this.state.selectedMove}\n\t      ascending = {this.state.ascending}\n\t      numRows = {numRows}\n\t    />\n\t  </div>\n\t</div>\n\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game numRows=\"3\"/>,\n  document.getElementById('root')\n);\n\nfunction calculateWinningCombos(numRows) {\n  let winningCombos = [];\n\n  //calculate horizontal row wins\n  for (let k = 0; k < numRows; k++) {\n    let combo = [];\n    for (let j = k*numRows; j < (k*numRows + numRows); j++) {\n      combo.push(j);\n    }\n    winningCombos.push(combo);\n  }\n\n  //calculate vertical column wins\n  for (let k=0; k < numRows; k++) {\n    let combo = [];\n    for (let j = k; j < numRows*numRows; j += numRows) {\n      combo.push(j);\n    }\n    winningCombos.push(combo);\n  }\n\n  //calculate diagonal wins\n  let diagonal1 = [];\n  for ( let k=0; k < (numRows*numRows); k += (numRows + 1) ) {\n    diagonal1.push(k);\n  }\n  winningCombos.push(diagonal1);\n\n  let diagonal2 = [];\n  for ( let k=(numRows - 1); k < (numRows*numRows); k +=(numRows - 1) ) {\n    diagonal2.push(k);\n  }\n  winningCombos.push(diagonal2);\n\n  return winningCombos;\n}\n\nfunction calculateWinningArray(squares, numRows) {\n  let winningCombos = calculateWinningCombos(numRows);\n\n  for (let i = 0; i < winningCombos.length; i++) {\n    let arr = [];\n    for (let h = 0; h < numRows; h++) {\n      arr.push( (winningCombos[i])[h] );\n    }\n    if (!squares[arr[0]]) {\n      continue;\n    }\n    for (let g = 1; g <= numRows; g++) {\n      if (g === numRows) {\n        return arr;\n      }\n      if (squares[arr[0]] != squares[arr[g]]) {\n        break;\n      }\n    }\n  }\n  return null;\n}\n\nfunction calculateWinner(squares, arr) {\n  if (arr) {\n    return squares[arr[0]];\n  } else {\n    return null;\n  }\n}\n\nfunction isBoardFull(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (!squares[i]) return false;\n  }\n  return true;\n}\n"],"sourceRoot":""}